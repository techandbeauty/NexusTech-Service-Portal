{
    "sourceFile": "config.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1749990438776,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1749990438776,
            "name": "Commit-0",
            "content": "// Firebase Configuration\n// Replace with your actual Firebase config values\nconst firebaseConfig = {\n  apiKey: \"your-api-key-here\",\n  authDomain: \"your-project-id.firebaseapp.com\",\n  projectId: \"your-project-id\",\n  storageBucket: \"your-project-id.appspot.com\",\n  messagingSenderId: \"your-sender-id\",\n  appId: \"your-app-id\",\n  databaseURL: \"https://your-project-id-default-rtdb.firebaseio.com/\"\n};\n\n// For production, use environment variables\n// This configuration will be overridden by Netlify environment variables\nif (typeof window !== 'undefined' && window.location.hostname !== 'localhost') {\n  // Production environment - these will be injected by Netlify\n  const prodConfig = {\n    apiKey: window.env?.FIREBASE_API_KEY || firebaseConfig.apiKey,\n    authDomain: window.env?.FIREBASE_AUTH_DOMAIN || firebaseConfig.authDomain,\n    projectId: window.env?.FIREBASE_PROJECT_ID || firebaseConfig.projectId,\n    storageBucket: window.env?.FIREBASE_STORAGE_BUCKET || firebaseConfig.storageBucket,\n    messagingSenderId: window.env?.FIREBASE_MESSAGING_SENDER_ID || firebaseConfig.messagingSenderId,\n    appId: window.env?.FIREBASE_APP_ID || firebaseConfig.appId,\n    databaseURL: window.env?.FIREBASE_DATABASE_URL || firebaseConfig.databaseURL\n  };\n  Object.assign(firebaseConfig, prodConfig);\n}\n\n// Initialize Firebase\nimport { initializeApp } from 'https://www.gstatic.com/firebasejs/10.7.1/firebase-app.js';\nimport { getAuth, createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut, onAuthStateChanged, GoogleAuthProvider, signInWithPopup } from 'https://www.gstatic.com/firebasejs/10.7.1/firebase-auth.js';\nimport { getFirestore, doc, setDoc, getDoc, collection, addDoc, query, orderBy, getDocs, serverTimestamp } from 'https://www.gstatic.com/firebasejs/10.7.1/firebase-firestore.js';\nimport { getAnalytics } from 'https://www.gstatic.com/firebasejs/10.7.1/firebase-analytics.js';\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nconst auth = getAuth(app);\nconst db = getFirestore(app);\nconst analytics = getAnalytics(app);\nconst googleProvider = new GoogleAuthProvider();\n\n// Export for use in other files\nwindow.firebaseApp = app;\nwindow.firebaseAuth = auth;\nwindow.firebaseDb = db;\nwindow.firebaseAnalytics = analytics;\n\n// Authentication functions\nwindow.authFunctions = {\n  // Sign up with email and password\n  signUp: async (email, password, userData = {}) => {\n    try {\n      const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n      const user = userCredential.user;\n      \n      // Save additional user data to Firestore\n      await setDoc(doc(db, 'users', user.uid), {\n        email: user.email,\n        createdAt: serverTimestamp(),\n        role: 'client',\n        ...userData\n      });\n      \n      return { success: true, user };\n    } catch (error) {\n      return { success: false, error: error.message };\n    }\n  },\n\n  // Sign in with email and password\n  signIn: async (email, password) => {\n    try {\n      const userCredential = await signInWithEmailAndPassword(auth, email, password);\n      return { success: true, user: userCredential.user };\n    } catch (error) {\n      return { success: false, error: error.message };\n    }\n  },\n\n  // Sign in with Google\n  signInWithGoogle: async () => {\n    try {\n      const result = await signInWithPopup(auth, googleProvider);\n      const user = result.user;\n      \n      // Check if user document exists, if not create one\n      const userDoc = await getDoc(doc(db, 'users', user.uid));\n      if (!userDoc.exists()) {\n        await setDoc(doc(db, 'users', user.uid), {\n          email: user.email,\n          displayName: user.displayName,\n          photoURL: user.photoURL,\n          createdAt: serverTimestamp(),\n          role: 'client'\n        });\n      }\n      \n      return { success: true, user };\n    } catch (error) {\n      return { success: false, error: error.message };\n    }\n  },\n\n  // Sign out\n  signOut: async () => {\n    try {\n      await signOut(auth);\n      return { success: true };\n    } catch (error) {\n      return { success: false, error: error.message };\n    }\n  },\n\n  // Get current user\n  getCurrentUser: () => {\n    return auth.currentUser;\n  },\n\n  // Listen for auth state changes\n  onAuthStateChanged: (callback) => {\n    return onAuthStateChanged(auth, callback);\n  }\n};\n\n// Database functions\nwindow.dbFunctions = {\n  // Submit project inquiry\n  submitProjectInquiry: async (projectData) => {\n    try {\n      const docRef = await addDoc(collection(db, 'projectInquiries'), {\n        ...projectData,\n        createdAt: serverTimestamp(),\n        status: 'new'\n      });\n      return { success: true, id: docRef.id };\n    } catch (error) {\n      return { success: false, error: error.message };\n    }\n  },\n\n  // Get user's project inquiries\n  getUserInquiries: async (userId) => {\n    try {\n      const q = query(\n        collection(db, 'projectInquiries'),\n        orderBy('createdAt', 'desc')\n      );\n      const querySnapshot = await getDocs(q);\n      const inquiries = [];\n      querySnapshot.forEach((doc) => {\n        const data = doc.data();\n        if (data.userId === userId) {\n          inquiries.push({ id: doc.id, ...data });\n        }\n      });\n      return { success: true, data: inquiries };\n    } catch (error) {\n      return { success: false, error: error.message };\n    }\n  },\n\n  // Get user profile\n  getUserProfile: async (userId) => {\n    try {\n      const userDoc = await getDoc(doc(db, 'users', userId));\n      if (userDoc.exists()) {\n        return { success: true, data: userDoc.data() };\n      } else {\n        return { success: false, error: 'User not found' };\n      }\n    } catch (error) {\n      return { success: false, error: error.message };\n    }\n  },\n\n  // Update user profile\n  updateUserProfile: async (userId, userData) => {\n    try {\n      await setDoc(doc(db, 'users', userId), {\n        ...userData,\n        updatedAt: serverTimestamp()\n      }, { merge: true });\n      return { success: true };\n    } catch (error) {\n      return { success: false, error: error.message };\n    }\n  }\n};\n\n// Initialize auth state listener\nwindow.authFunctions.onAuthStateChanged((user) => {\n  if (user) {\n    // User is signed in\n    console.log('User signed in:', user.email);\n    // Update UI to show signed-in state\n    document.dispatchEvent(new CustomEvent('userSignedIn', { detail: user }));\n  } else {\n    // User is signed out\n    console.log('User signed out');\n    // Update UI to show signed-out state\n    document.dispatchEvent(new CustomEvent('userSignedOut'));\n  }\n});\n\nconsole.log('Firebase initialized successfully');"
        }
    ]
}